#!/usr/bin/env python3
"""
Script d'initialisation du projet F1 Predictor.

Ce script configure l'environnement de d√©veloppement et v√©rifie les d√©pendances.
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def run_command(command: str, check: bool = True) -> subprocess.CompletedProcess:
    """Ex√©cute une commande shell."""
    logger.info(f"Ex√©cution: {command}")
    return subprocess.run(
        command, 
        shell=True, 
        check=check, 
        capture_output=True, 
        text=True
    )


def check_python_version():
    """V√©rifie la version de Python."""
    logger.info("üêç V√©rification de la version Python...")
    
    if sys.version_info < (3, 10):
        logger.error("‚ùå Python 3.10+ requis")
        sys.exit(1)
    
    logger.info(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")


def create_virtual_environment():
    """Cr√©e un environnement virtuel."""
    logger.info("üîß Cr√©ation de l'environnement virtuel...")
    
    venv_path = Path("venv")
    if venv_path.exists():
        logger.info("‚ö†Ô∏è Environnement virtuel existant d√©tect√©")
        return
    
    try:
        run_command("python -m venv venv")
        logger.info("‚úÖ Environnement virtuel cr√©√©")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation du venv: {e}")
        sys.exit(1)


def install_dependencies():
    """Installe les d√©pendances."""
    logger.info("üì¶ Installation des d√©pendances...")
    
    # D√©tection de l'OS pour l'activation du venv
    if os.name == 'nt':  # Windows
        pip_path = "venv\\Scripts\\pip"
    else:  # Unix/Linux/macOS
        pip_path = "venv/bin/pip"
    
    try:
        # Mise √† jour de pip
        run_command(f"{pip_path} install --upgrade pip")
        
        # Installation des d√©pendances de d√©veloppement
        run_command(f"{pip_path} install -r requirements-dev.txt")
        
        # Installation du package en mode d√©veloppement
        run_command(f"{pip_path} install -e .")
        
        logger.info("‚úÖ D√©pendances install√©es")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur lors de l'installation: {e}")
        sys.exit(1)


def setup_pre_commit():
    """Configure les hooks pre-commit."""
    logger.info("üîó Configuration des hooks pre-commit...")
    
    if os.name == 'nt':  # Windows
        precommit_path = "venv\\Scripts\\pre-commit"
    else:  # Unix/Linux/macOS
        precommit_path = "venv/bin/pre-commit"
    
    try:
        run_command(f"{precommit_path} install")
        logger.info("‚úÖ Hooks pre-commit configur√©s")
    except subprocess.CalledProcessError as e:
        logger.warning(f"‚ö†Ô∏è Erreur lors de la configuration pre-commit: {e}")


def create_env_file():
    """Cr√©e le fichier .env √† partir de .env.example."""
    logger.info("‚öôÔ∏è Configuration du fichier d'environnement...")
    
    env_example = Path(".env.example")
    env_file = Path(".env")
    
    if env_file.exists():
        logger.info("‚ö†Ô∏è Fichier .env existant d√©tect√©")
        return
    
    if env_example.exists():
        try:
            env_file.write_text(env_example.read_text())
            logger.info("‚úÖ Fichier .env cr√©√© √† partir de .env.example")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la cr√©ation du .env: {e}")
    else:
        logger.warning("‚ö†Ô∏è Fichier .env.example non trouv√©")


def verify_installation():
    """V√©rifie l'installation."""
    logger.info("üîç V√©rification de l'installation...")
    
    if os.name == 'nt':  # Windows
        python_path = "venv\\Scripts\\python"
    else:  # Unix/Linux/macOS
        python_path = "venv/bin/python"
    
    try:
        # Test d'import du package principal
        result = run_command(f"{python_path} -c 'import src; print(\"‚úÖ Package src import√©\")'")
        logger.info(result.stdout.strip())
        
        # Test des d√©pendances principales
        result = run_command(f"{python_path} -c 'import pandas, numpy, sklearn; print(\"‚úÖ D√©pendances ML import√©es\")'")
        logger.info(result.stdout.strip())
        
        logger.info("‚úÖ Installation v√©rifi√©e avec succ√®s")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification: {e}")


def print_next_steps():
    """Affiche les prochaines √©tapes."""
    logger.info("\nüéâ Configuration termin√©e !")
    
    activation_cmd = "venv\\Scripts\\activate" if os.name == 'nt' else "source venv/bin/activate"
    
    print(f"""
üìã Prochaines √©tapes:

1. Activer l'environnement virtuel:
   {activation_cmd}

2. Lancer l'exploration des donn√©es:
   jupyter notebook notebooks/01_data_exploration.ipynb

3. D√©marrer l'API de d√©veloppement:
   uvicorn api.main:app --reload

4. Lancer l'interface Streamlit:
   streamlit run web/streamlit/app.py

5. Ex√©cuter les tests:
   pytest tests/

üìö Documentation:
   - README.md pour le guide g√©n√©ral
   - CONTRIBUTING.md pour contribuer
   - docs/ pour la documentation d√©taill√©e

üöÄ Bon d√©veloppement !
""")


def main():
    """Fonction principale."""
    logger.info("üèéÔ∏è Initialisation du projet F1 Predictor")
    
    try:
        check_python_version()
        create_virtual_environment()
        install_dependencies()
        setup_pre_commit()
        create_env_file()
        verify_installation()
        print_next_steps()
        
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è Installation interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 