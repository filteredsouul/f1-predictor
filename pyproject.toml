[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "f1-predictor"
version = "1.0.0"
description = "Modèle de Machine Learning pour prédire les résultats des Grands Prix de Formule 1"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Charles-François Fouti-Loemba", email = "contact@f1predictor.com"}
]
maintainers = [
    {name = "Charles-François Fouti-Loemba", email = "contact@f1predictor.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
requires-python = ">=3.10"
dependencies = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "xgboost>=1.7.0",
    "catboost>=1.2.0",
    "lightgbm>=4.0.0",
    "requests>=2.31.0",
    "fastf1>=3.0.0",
    "tsfresh>=0.20.0",
    "ta>=0.10.0",
    "joblib>=1.3.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "pydantic>=2.0.0",
    "streamlit>=1.25.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "tqdm>=4.65.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "hypothesis>=6.80.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
]
all = [
    "mlflow>=2.5.0",
]

[project.urls]
"Homepage" = "https://github.com/username/f1-predictor"
"Bug Reports" = "https://github.com/username/f1-predictor/issues"
"Source" = "https://github.com/username/f1-predictor"
"Documentation" = "https://f1-predictor.readthedocs.io/"

[project.scripts]
f1-predictor = "src.cli:main"
f1-train = "scripts.train_model:main"
f1-collect = "scripts.collect_data:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "api*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ["py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "fastf1.*",
    "catboost.*",
    "xgboost.*",
    "lightgbm.*",
    "tsfresh.*",
    "ta.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src", "api"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"] 