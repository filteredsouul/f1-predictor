"""
Application FastAPI principale pour F1 Predictor.

Cette API permet de faire des pr√©dictions sur les r√©sultats de F1.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import logging
import os
from typing import Dict, Any

from api.endpoints import predict, health
from api.dependencies import get_model_pipeline

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, os.getenv("LOG_LEVEL", "INFO")),
    format=os.getenv("LOG_FORMAT", "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
)

logger = logging.getLogger(__name__)

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="F1 Predictor API",
    description="API de pr√©diction des r√©sultats de Formule 1",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # √Ä restreindre en production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """Gestionnaire d'erreurs HTTP personnalis√©."""
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail, "status_code": exc.status_code}
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """Gestionnaire d'erreurs g√©n√©rales."""
    logger.error(f"Erreur non g√©r√©e: {exc}")
    return JSONResponse(
        status_code=500,
        content={"detail": "Erreur interne du serveur", "status_code": 500}
    )


# √âv√©nements de d√©marrage et arr√™t
@app.on_event("startup")
async def startup_event():
    """Actions √† effectuer au d√©marrage de l'API."""
    logger.info("üöÄ D√©marrage de F1 Predictor API")
    
    # Chargement du mod√®le (optionnel au d√©marrage)
    try:
        pipeline = get_model_pipeline()
        if pipeline:
            logger.info("‚úÖ Mod√®le charg√© avec succ√®s")
        else:
            logger.warning("‚ö†Ô∏è Aucun mod√®le trouv√© - mode d√©grad√©")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chargement du mod√®le: {e}")


@app.on_event("shutdown")
async def shutdown_event():
    """Actions √† effectuer √† l'arr√™t de l'API."""
    logger.info("üõë Arr√™t de F1 Predictor API")


# Routes principales
@app.get("/")
async def root() -> Dict[str, Any]:
    """Route racine avec informations sur l'API."""
    return {
        "message": "Bienvenue sur F1 Predictor API",
        "version": "1.0.0",
        "status": "active",
        "docs": "/docs",
        "health": "/health"
    }


# Inclusion des routers
app.include_router(health.router, prefix="/health", tags=["health"])
app.include_router(predict.router, prefix="/predict", tags=["prediction"])


if __name__ == "__main__":
    import uvicorn
    
    # Configuration par d√©faut pour le d√©veloppement
    uvicorn.run(
        "api.main:app",
        host=os.getenv("API_HOST", "0.0.0.0"),
        port=int(os.getenv("API_PORT", 8000)),
        reload=os.getenv("RELOAD", "True").lower() == "true",
        log_level=os.getenv("LOG_LEVEL", "info").lower()
    ) 